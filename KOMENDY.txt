1. Wklejamy te komendy:
dotnet new webapi -n API
dotnet add package Microsoft.EntityFrameworkCore --version 6.0.10;
dotnet add package Microsoft.EntityFrameworkCore.SqlServer --version 6.0.10;
dotnet add package Microsoft.EntityFrameworkCore.Design --version 6.0.10;
dotnet tool install --global dotnet-ef --version 6.0.10;
dotnet add package Microsoft.EntityFrameworkCore.SqlServer --version 6.0.10;
dotnet add package Microsoft.EntityFrameworkCore.Design --version 6.0.10;

2. W appsettings.json dodajemy ConnectStringa:
"ConnectionStrings": {
    "DefaultConnection": "Server=(localdb)\\mssqllocaldb;Database=PersonDB;Trusted_Connection=True;"
  }

3. Wywalamy WeatherForecast z głównego folderu i z Controlera

4. W głównym folderze API tworzymy 2 foldery:
- Models
- Data

5. W Models tworzymy nasz model np. Person.cs
public class Person
{
  public int Id { get; set; }
  public string FirstName { get; set; } = null!;
  public string LastName { get; set; } = null!;
  public DateTime DateOfBirth { get; set; }
  public string origin { get; set; } = null!;
}

6. W Data tworzymy ApplicationDbContext.cs:
public class ApplicationDbContext : DbContext
{
  public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options) : base(options) { }
  protected override void OnModelCreating(ModelBuilder modelBuilder) { }
  public DbSet<Person> People { get; set; } = null!;
}

7. W Controllers tworzymy PersonController.cs:
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;

[ApiController]
[Route("[controller]")]
public class PersonController : ControllerBase
{
  private readonly ApplicationDbContext _context;

  public PersonController(ApplicationDbContext context)
  {
    _context = context;
  }
}


8. W program.cs Dodajemy potrzebne rzeczy:
- Przed var app:
builder.Services.AddDbContext<ApplicationDbContext>(options =>
    options.UseSqlServer(builder.Configuration.GetConnectionString("DefaultConnection")));

builder.Services.AddCors(options =>
{
    options.AddPolicy("OpenCorsPolicy",
        builder => builder.AllowAnyOrigin()
                          .AllowAnyHeader()
                          .AllowAnyMethod());
});

9. Dodajemy usingi tam gdzie wywala błąd

10. Sprawdzamy czy wszystko działa:
dotnet build

11.  Robimy migrację:
dotnet ef migrations add baza3;
dotnet ef database update;

12. Dodajemy do bazy danych
INSERT INTO People (FirstName, LastName, DateOfBirth, origin) 
VALUES 
('Thomas', 'Prauzner', '2000-01-01', 'Poland'),
('Anna', 'Kowalska', '1995-05-15', 'Poland'),
('Piotr', 'Nowak', '1988-11-23', 'Poland');


SELECT * FROM People;


13. Dodajemy do kontrolera zwracanie wszystkich osób:
  // Zwroc wszystkie osoby
  [HttpGet]
  public async Task<ActionResult<IEnumerable<Person>>> GetPeople()
  {
    return await _context.People.ToListAsync();
  }

14. Jeszcze raz aktualizujemy baze:
dotnet ef migrations add baza2;
dotnet ef database update;


15. Sprawdzamy swaggerem czy działa:
localhost:7055/swagger


16. Tworzymy projekt react:
npm install create-react-app
npx create-react-app react-app --template typescript

17. W src tworzymy Personitem.tsx i PersonList.tsx
PersonItem.tsx:
import React from 'react'

interface PersonItemProps {
  id: number
  firstName: string
  lastName: string
  dateOfBirth: Date
  origin: string
}

const PersonItem: React.FC<PersonItemProps> = ({
  id,
  firstName,
  lastName,
  dateOfBirth,
  origin,
}) => {
  return (
    <tr>
      <td>{id}</td>
      <td>{firstName}</td>
      <td>{lastName}</td>
      <td>{dateOfBirth.toLocaleDateString()}</td>
      <td>{origin}</td>
    </tr>
  )
}



PersonList.tsx:
import React, { useEffect, useState } from 'react'
import PersonItem from './PersonItem'
import { table } from 'console'

interface Person {
  id: number
  firstName: string
  lastName: string
  dateOfBirth: Date
  origin: string
}

const PersonList: React.FC = () => {
  const [people, setPeople] = useState<Person[]>([])

  useEffect(() => {
    const fetchData = async () => {
      try {
        const response = await fetch('https://localhost:7055/getPeople')
        const data: Person[] = await response.json()
        setPeople(data)
      } catch (error) {
        console.error('Error fetching addresses:', error)
      }
    }

    fetchData()
  }, [])

  return (
    <>
      <table>
        <thead>
          <tr>
            <th>Id</th>
            <th>FirstName</th>
            <th>LastName</th>
            <th>DateOfBirth</th>
            <th>Origin</th>
          </tr>
        </thead>
        <tbody>
          {people.map((person) => (
            <PersonItem key={person.id} {...person} />
          ))}
        </tbody>
      </table>
      <button>Dodaj</button>
      <button>Edytuj</button>
      <button>Usuń</button>
    </>
  )
}

export default PersonList



18. Dodaj routing:




Angular:
npm install -g @angular/cli
ng new angular-app --standalone=false
ng generate service person;
ng generate component PersonList;
ng generate component AddPersonForm;
ng generate component EditPersonForm;
ng generate component DeletePersonForm;
